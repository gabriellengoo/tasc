<template>
  <div>
    <h2>Step 2: Body Selection</h2>
    
    <!-- Hairstyle Selection (Does not reflect on avatar) -->
    <div>
      <h3>Please tell us about your current hairstyle</h3>
      <p>Texture:</p>
      <div>
        <button>Straight</button>
        <button>Wavy</button>
        <button>Curly</button>
        <button>Afro</button>
      </div>
      <p>Length:</p>
      <div>
        <button>Bald</button>
        <button>Short</button>
        <button>Medium</button>
        <button>Long</button>
      </div>
      <p>Colour:</p>
      <div>
        <button>Black</button>
        <button>Brown</button>
        <button>Blonde</button>
        <button>Red</button>
        <button>Auburn</button>
        <button>Grey/White</button>
      </div>
    </div>
    
    <!-- Skin Tone Selection (Reflects on avatar arms) -->
    <div>
      <h3>Please select your closest skin tone match</h3>
      <p>This helps us to tailor our recommendations to you.</p>
      <div>
        <button>Light Skin Tone (Type I)</button>
        <button>Fair Skin Tone (Type II)</button>
        <button>Medium Skin Tone (Type III)</button>
        <button>Medium-Dark Skin Tone (Type IV)</button>
        <button>Dark Skin Tone (Type V-VI)</button>
      </div>
    </div>
    
    <!-- Face Shape Selection (Reflects on avatar) -->
    <div>
      <h3>What face shape do you have?</h3>
      <p>This helps us suggest the best accessory styles for you.</p>
      <div>
        <button>Oval</button>
        <button>Round</button>
        <button>Square</button>
        <button>Heart</button>
        <button>Triangular</button>
        <button>Rectangular</button>
        <button>Diamond</button>
      </div>
    </div>
    
    <!-- Eye Colour Selection (Does not reflect on avatar) -->
    <div>
      <h3>Please tell us your eye colour</h3>
      <div>
        <button>Blue</button>
        <button>Green</button>
        <button>Brown</button>
        <button>Hazel</button>
        <button>Grey</button>
      </div>
    </div>
    
    <!-- Height Selection (Reflects on avatar, gender-specific) -->
    <div>
      <h3>Please select your height range (Women)</h3>
      <input type="range" min="1" max="4" list="heights-women">
      <datalist id="heights-women">
        <option value="1" label="Petite (<5'3)"></option>
        <option value="2" label="Average (5'3 - 5'7)"></option>
        <option value="3" label="Tall (5'7-5'10)"></option>
        <option value="4" label="Very Tall (5'10+)"></option>
      </datalist>
    </div>
    
    <div>
      <h3>Please select your height range (Men)</h3>
      <input type="range" min="1" max="4" list="heights-men">
      <datalist id="heights-men">
        <option value="1" label="Short: Below 5'7"></option>
        <option value="2" label="Average: 5'7 to 5'11"></option>
        <option value="3" label="Tall: 6'0 to 6'3"></option>
        <option value="4" label="Very Tall: Above 6'3"></option>
      </datalist>
    </div>
    
    <!-- Clothing Size Selection (Reflects on avatar build) -->
    <div>
      <h3>Please tell us your typical size for tops</h3>
      <div>
        <button>S (6-8)</button>
        <button>M (10-12)</button>
        <button>L (14-16)</button>
        <button>XL+ (18+)</button>
      </div>
    </div>
    
    <div>
      <h3>Please tell us your typical size for bottoms</h3>
      <div>
        <button>S (6-8)</button>
        <button>M (10-12)</button>
        <button>L (14-16)</button>
        <button>XL+ (18+)</button>
      </div>
    </div>
    
    <!-- Footwear Size Selection (Does not reflect on avatar) -->
    <div>
      <h3>Please tell us your typical footwear size</h3>
      <input type="number" min="3" max="14">
    </div>
  </div>
</template>

<script>
export default {
  props: ["model"],
  data() {
    return {
      formData: {
        hair: "",
        skin: "",
        eyeColor: "",
      },
      morphTargets: {},
      morphValues: {},
      mesh: null,
    };
  },

  watch: {
    model: {
      immediate: true,
      handler(newModel) {
        if (newModel) {
          this.updateModel();
        }
      },
    },
  },

  mounted() {
    if (this.model) {
      this.updateModel();
    }
  },

  methods: {
    nextStep() {
      this.$emit("next", this.formData);
    },

    updateModel() {
      if (!this.model) return;
      if (!this.mesh) {
        this.mesh = this.model;
      }

      if (this.mesh.morphTargetDictionary) {
        const targetMap = {
          "Arm_Mount_Left.001": "Cheekbones",
          "Arm_Mount_Left.002": "Jaw",
        };

        this.morphTargets = {};

        Object.keys(this.mesh.morphTargetDictionary).forEach((key) => {
          if (targetMap[key]) {
            this.morphTargets[key] = targetMap[key];
            this.morphValues[key] = 0.5;
          }
        });
      }
    },

    applyMorph(morphKey, value) {
      if (!this.mesh || !this.mesh.morphTargetDictionary) return;

      const index = this.mesh.morphTargetDictionary[morphKey];
      if (index !== undefined) {
        this.$set(this.mesh.morphTargetInfluences, index, value);
      }
    },
  },
};
</script>

<style scoped>
.slider {
  width: 100%;
  height: 0.3vw;
  background: #d2d2d2;
  border-radius: 5px;
  outline: none;
}
.slider::-webkit-slider-thumb {
  width: 1vw;
  height: 1vw;
  background: #000;
  border-radius: 50%;
  cursor: pointer;
}
label {
  font-size: 1.1vw;
}
button {
  font-size: 1.1vw;
  padding: 12px 20px;
  margin-top: 20px;
  cursor: pointer;
}
</style>
