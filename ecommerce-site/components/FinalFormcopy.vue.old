<template>
    <div>
      <h2 class="headerform">Final Preferences</h2>
  
      <div class="formstyle">
      
  
        <!-- Budget Section -->
        <transition name="slide" @before-enter="beforeEnter" @enter="enter" @leave="leave">
          <div v-if="currentChunk === 0" class="form-section">
            <h3 class="smalllable1 pt-[2vw]">BUDGET - STEP 3</h3>
            <div v-for="item in budgetItems" :key="item.key">
              <label class="smalllable2">{{ item.name }}</label>
              <div class="budget-container">
                <button v-for="level in ['ðŸ’¸', 'ðŸ’¸ðŸ’¸', 'ðŸ’¸ðŸ’¸ðŸ’¸', 'ðŸ’¸ðŸ’¸ðŸ’¸ðŸ’¸']" :key="level"
                        :class="{ 'selected': budget[item.key] === level, 'unselected': budget[item.key] !== level }"
                        @click="selectBudget(item.key, level)">
                  {{ level }}
                </button>
              </div>
            </div>
          </div>
        </transition>
  
        <!-- Preferences Section -->
        <transition name="slide" @before-enter="beforeEnter" @enter="enter" @leave="leave">
          <div v-if="currentChunk === 1" class="form-section">
            <h3 class="smalllable1 pt-[2vw]">PREFERENCES - STEP 4</h3>
            <label class="smalllable2">How do you like your clothes to fit?</label>
  
            <!-- Custom Buttons -->
            <div class="stepbtncontainer">
              <button v-for="option in ['Fitted', 'True to Size', 'Oversized']" :key="option" class="btns"
                      :class="{ selected: fit === option }" @click="selectOption('fit', option)">
                {{ option }}
              </button>
            </div>
          </div>
        </transition>
  
        <!-- Favourite Colours Section -->
         <!-- New Color Preferences Section -->
         <transition name="slide" @before-enter="beforeEnter" @enter="enter" @leave="leave">
        <div v-if="currentChunk === 2" class="form-section">
          <h3 class="smalllable1 pt-[2vw]">COLOR PREFERENCES</h3>
          <label class="smalllable2">What are your favourite colours to wear? (Optional palette of up to 4 colors)</label>
          <input 
            v-model="colorInput" 
            @input="onInput" 
            @keydown.enter="addColor" 
            type="text" 
            class="color-input" 
            placeholder="Start typing a color..."
          />
          
          <div v-if="filteredColors.length > 0" class="suggestions">
            <ul>
              <li v-for="color in filteredColors" :key="color" @click="addColorFromSuggestion(color)">
                {{ color }}
              </li>
            </ul>
          </div>

          <div class="color-tags">
            <span v-for="(color, index) in selectedColors" :key="index" class="color-tag">
              {{ color }}
            </span>
          </div>
        </div>
      </transition>
    
      </div>
  
      <!-- Navigation Buttons -->
      <div class="navbutform" v-if="currentChunk !== 2">
        <button class="nextbtn" v-if="currentChunk > 0" @click="prevStep"><svg viewBox="0 0 24 24" fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <g id="SVGRepo_bgCarrier" stroke-width="0"></g>
            <g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g>
            <g id="SVGRepo_iconCarrier">
              <path
                d="M13 8L9 12M9 12L13 16M9 12H21M19.4845 7C17.8699 4.58803 15.1204 3 12 3C7.02944 3 3 7.02944 3 12C3 16.9706 7.02944 21 12 21C15.1204 21 17.8699 19.412 19.4845 17"
                stroke="#000000" stroke-width="0.8879999999999999" stroke-linecap="round"
                stroke-linejoin="round"></path>
            </g>
          </svg></button>
        <button class="nextbtn" v-if="currentChunk < 2" @click="nextStep"> <svg viewBox="0 0 24 24" fill="none"
            xmlns="http://www.w3.org/2000/svg">
            <path
              d="M11 16L15 12M15 12L11 8M15 12H3M4.51555 17C6.13007 19.412 8.87958 21 12 21C16.9706 21 21 16.9706 21 12C21 7.02944 16.9706 3 12 3C8.87958 3 6.13007 4.58803 4.51555 7"
              stroke="#000000" stroke-width="0.8879999999999999" stroke-linecap="round"
              stroke-linejoin="round">
            </path>
          </svg>
        </button>
      </div>
  
      <button class="headerformsub pt-[5vw]" v-if="currentChunk === 3" @click="submitFinalForm">Submit</button>
    </div>
  </template>
  

<script>
export default {
  data() {
    return {
      currentChunk: 0,
      modesty: "",
      budget: {
        outerwear: "",
        knitwear: "",
        tops: "",
        bottoms: "",
        dresses: "",
        footwear: "",
        accessories: "",
        jewellery: "",
      },
      fit: "",
      colorInput: "",
      selectedColors: [], // To store selected colors
      allColors: ['red', 'blue', 'green', 'yellow', 'orange', 'pink', 'purple', 'brown', 'black', 'white', 'gray'], // List of all available colors
      filteredColors: [], // Colors that match the current input
      maxColors: 4, // Limit to 4 colors
       budgetItems: [
        { name: "Outerwear", key: "outerwear" },
        { name: "Knitwear", key: "knitwear" },
        { name: "Tops", key: "tops" },
        { name: "Bottoms", key: "bottoms" },
        { name: "Dresses", key: "dresses" },
        { name: "Footwear", key: "footwear" },
        { name: "Accessories", key: "accessories" },
        { name: "Jewellery", key: "jewellery" },
      ],
    };
  },
  methods: {
    nextStep() {
      if (this.currentChunk < 2) this.currentChunk++;
    },
    prevStep() {
      if (this.currentChunk > 0) this.currentChunk--;
    },
    selectOption(category, value) {
      this[category] = value;
    },
    selectBudget(category, level) {
      this.budget[category] = level;
    },
    submitFinalForm() {
      console.log('Submitting Final Form:', this.$data);
      this.$emit('close');
    },
    beforeEnter(el) {
      el.style.opacity = 0;
    },
    enter(el, done) {
      el.offsetHeight; // Trigger reflow
      el.style.transition = 'opacity 0.5s';
      el.style.opacity = 1;
      done();
    },
    leave(el, done) {
      el.style.transition = 'opacity 0.5s';
      el.style.opacity = 0;
      done();
    },


    // Handle user input and filter colors
    onInput() {
      const searchTerm = this.colorInput.trim().toLowerCase();
      this.filteredColors = this.allColors.filter(color => color.includes(searchTerm));
    },

    // Add color tag
    addColor() {
      const color = this.colorInput.trim().toLowerCase();
      if (color && this.selectedColors.length < this.maxColors && !this.selectedColors.includes(color) && this.allColors.includes(color)) {
        this.selectedColors.push(color);
        this.colorInput = ''; // Reset input after adding color
        this.filteredColors = []; // Clear suggestions after adding
      }
    },
    addColorFromSuggestion(color) {
      if (this.selectedColors.length < this.maxColors && !this.selectedColors.includes(color)) {
        this.selectedColors.push(color);
        this.colorInput = ''; // Reset input after adding color
        this.filteredColors = []; // Clear suggestions after adding
      }
    },
  },
};

</script>

<style scoped>
.outfit-feedback {
    text-align: center;
}

.outfits {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
    justify-content: center;
    margin-top: 20px;
}

.outfit-item {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.outfit-image {
    width: 150px;
    height: 200px;
    object-fit: cover;
    border-radius: 10px;
}

.buttons {
    margin-top: 10px;
}

/* button {
    margin: 5px;
    padding: 10px 15px;
    border: none;
    cursor: pointer;
    border-radius: 5px;
    background-color: lightgray;
}

button.active {
    background-color: black;
    color: white;
} */

.skip {
    margin-top: 20px;
    background-color: transparent;
    color: gray;
    text-decoration: underline;
    cursor: pointer;
}

.color-input {
    width: 100%;
    padding: 0.5vw;
    margin-top: 1vw;
}

.suggestions {
    background: white;
    border: 1px solid #ddd;
    position: absolute;
}

.color-tags span {
    background: #ddd;
    padding: 0.5vw;
    margin-right: 0.5vw;
}

.slider {
    width: 100%;
    margin-top: 1vw;
}

.slider-value {
    font-size: 1.5vw;
    display: block;
    text-align: center;
    margin-top: 1vw;
}

.budget-container button {
    cursor: pointer;
    font-size: 2vw;
    color: rgb(199, 199, 199);
    transition: color 0.3s;
    padding-right: 3vw;
}

.budget-container button.selected {
    color: rgb(39, 149, 11);
    background-color: rgba(0, 0, 0, 0) !important;
    opacity: .3;
    /* font-weight: bold; */
}

.budget-container button:hover {
    color: black;
    background-color: rgba(0, 0, 0, 0) !important;
    opacity: .3;
    /* font-weight: bold; */
}


.slide-enter-active,
.slide-leave-active {
    transition: transform 0.5s ease;
}

.slide-enter,
.slide-leave-to {
    transform: translateX(100%);
}

.nextbtn {
    margin-top: 20px;
}



/* Styling for the color input and suggestions */
.color-input {
  padding: 8px;
  font-size: 1rem;
  margin: 10px 0;
  width: 100%;
  background: #f2f2f200;
  border-bottom: black solid 1px;
}

.suggestions {
    border: 1px solid #ddd;
    border: solid #c3c3c3 .1vw;
    margin-top: 1vw;
    padding: .5vw;
    background-color: #f2f2f2;
    position: relative;
    max-height: 4vw;
    width: 100%;
    overflow-y: auto;
    
}

.suggestions ul {
  list-style-type: none;
  padding: 0;
}

.suggestions li {
  padding: 8px;
  cursor: pointer;
}

.suggestions li:hover {
  background-color: #ddd;
}

.color-tags {
  display: flex;
  flex-wrap: wrap;
  margin-top: 10px;
}

.color-tag {
  background-color: #eee;
  padding: 5px 10px;
  margin: 5px;
  border-radius: 4px;
  font-size: 0.9rem;
}
</style>