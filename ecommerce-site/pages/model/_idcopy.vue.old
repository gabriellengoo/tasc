<template>
  <div v-if="!modelPath" class="error">Model Not Found </div>
  
  <div v-else class="model-viewer">
    <canvas ref="canvas"></canvas>
  </div>
</template>

<script>
import * as THREE from "three";
import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";

export default {
  async asyncData({ params }) {
    console.log("Route Params:", params);
    return { id: params.id };
  },
  data() {
    return {
      canvas: null,
      modelPath: null,
      models: {
        ovalm: "/models/ovalm.glb",
        squarem: "/models/squarem.glb",
        intrim: "/models/intrim.glb",
        trim: "/models/trim.glb",
        maledefault: "/models/maledefault.glb",
        hour: "/models/hour.glb",
        W_02: "/models/squw.glb",
        W_03: "/models/intriw.glb",
        W_04: "/models/apple.glb",
        W_01: "/models/pear.glb",
      }
    };
  },
  mounted() {
  this.modelPath = this.models[this.$route.params.id];

  if (!this.modelPath) {
    console.error("Model not found!");
    return;
  }

  this.initThreeJS();
},

methods: {
  initThreeJS() {
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0xADD8E6); // Set background color

    const camera = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 0.1, 1000);
    camera.position.set(0, 1, 3);

    this.canvas = this.$refs.canvas;
    const renderer = new THREE.WebGLRenderer({ canvas: this.canvas, antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    document.body.appendChild(renderer.domElement);

    const loader = new GLTFLoader();
    loader.load(
      this.modelPath,
      (gltf) => {
        const model = gltf.scene;
        model.scale.set(0.5, 0.5, 0.5); // Scale down the model
        scene.add(model);

        // Add orbit controls
        const controls = new OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true; // Smooth controls
        controls.dampingFactor = 0.25;
        controls.screenSpacePanning = false; // Prevent panning in screen space

        animate();
      },
      undefined,
      (error) => console.error("Error loading model:", error)
    );

    const light = new THREE.AmbientLight(0xffffff, 1);
    scene.add(light);

    const animate = () => {
      requestAnimationFrame(animate);
      controls.update(); // Update controls
      renderer.render(scene, camera);
    };

    animate();
  }
}

};
</script>

<style scoped>
.model-viewer {
  width: 100vw;
  height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
}
</style>
